<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Video: {{ video_title }} by {{video_creator }}, annotated</title>
  <!-- Heavily adapted from https://github.com/dwhly-proj/droppdf/blob/master/droppdf/apps/_templates/youtube.html -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" integrity="sha512-SfTiTlX6kk+qitfevl/7LibUOeJWlt9rbyDn92a1DqWOw9vWG2MFoays0sgObmWazO5BQPiFucnnEAjpAB+/Sw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script src="https://cdn.hypothes.is/hypothesis" async></script>

  <style>
        body {
            font-family: sans-serif;
            padding-bottom: .5vh;
        }

        header {
            width: 100%;
            top: 0;
            display: flex;
            flex-direction: row;
            justify-content: flex-start;
            align-items: end;
            padding-bottom: .5em;
        }

        header div {
            padding: 1em;
            display: flex;
            justify-content: center;
            align-item: center;
        }

        header a.homelink {
            color: #000;
            font-size: 1.3em;
            text-decoration: none;
            font-family: "Montserrat Bold", sans-serif;
            user-select: none;
        }

        a {
            color: #42812D;
            text-decoration: none;
        }

        a:hover {
            cursor: pointer;
        }

        .button {
            border: 1px solid #000;
            border-radius: 2px;
            font-size: .8em;
            padding: .25em;
            user-select: none;
        }

        .button:hover {
            cursor: pointer;
        }

        .button i {
            margin-left: .25em;
            margin-right: .25em;
        }

        .button-off {
            background-color: #000;
            color: #fff;
        }

        .button-inactive {
            background-color: #c2c2c2;
            border-color: #c2c2c2;
            opacity: .3;
        }

        .button-inactive:hover {
            cursor: not-allowed;
        }

        .play-button {
            width: 4.5em;
        }

        .button-spacer {
            width: .25em;
        }

        .bold {
            font-weight: bold;
        }

        .italic {
            font-style: italic;
        }

        .action-char {
            font-size: 1.1em;
            z-index: 1000;
        }

        .action-char:hover {
            cursor: pointer;
        }

        .main-content {
            width: 94%;
            display: flex;
            flex: 1;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: space-around;
        }

        .left-col {
            position: relative;
            display: flex;
            box-sizing: border-box;
            flex: 1;
            flex-direction: column;
            padding-right: 1.5em;
        }

        .sub-box {
            box-sizing: border-box;
            padding-left: 20px;
            padding-right: 20px;
            margin-left: 1px;
            position: relative;
            width: 100%;
            min-width: 100%;
            max-width: 100%;
            max-height: 80vh;
            overflow-y: scroll;
            scrollbar-width: thin;
            border: 1px solid #c2c2c2;
            border-radius: 3px;
        }

        .sub-box::-webkit-scrollbar {
            width: 10px;
        }

        .sub-box::-webkit-scrollbar-track {
            background: #f1f1f1;

        }

        .sub-box::-webkit-scrollbar-thumb {
            background-color: #c2c2c2;
            border: 1px solid #fff;
        }

        .subs {
            position: relative;
        }

        #substart-text {
            margin-top: 0;
            border: 0;
        }

        .sub {
            color: #696969;
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
            justify-content: flex-start;
            padding-top: .5em;
            padding-bottom: .5em;
        }

        .sub-line:before {
            width: 2em;
            display: inline-block;
            margin-right: 0.5em;
        }

        .sub-text {
            margin-left: 4.5em;
            margin-top: -1em;
            padding-left: 1em;
            border-left: 1px solid black;
        }

        .sub-label {
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
            justify-content: flex-start;
            padding-top: .5em;
            padding-bottom: .5em;
        }

        .control-box {
            position: relative;
            width: 100%;
            min-width: 100%;
            max-width: 100%;
            display: flex;
            flex-direction: row;
            flex-wrap: nowrap;
            justify-content: space-between;
            padding-bottom: 1em;
        }

        .control-box-subsection {
            display: flex;
            flex-direction: row;
        }

        .highlight {
            color:#000 !important;
        }

        .search-highlight {
            background-color: #FFAB00;
        }

        .sub-time {
            color: #87878E;
            min-width: 5em;
            max-width: 5em;
            user-select: none;
        }

        .sub-text:hover {
            cursor: text;
            color: #42812D;
        }

        .player-box {
            width: 55vw;
        }

        #video-player {
            border-radius: 5px;
            position: relative;
            overflow: hidden;
            min-width: 100%;
            max-width: 100%;
            height: 0;
            padding-bottom: 56.25%;
        }

        #video-player-iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        {% for sub in transcript %}div.sub-line.line{{ loop.index }}:before {content: "{{ sub.start_display }}";}
        {% endfor %}

        @media (max-width: 992px) {
            body {
                height: 97vh;
                max-height: 97vh;
                display: flex;
                flex-direction: column;
                flex-wrap: nowrap;
                justify-content: flex-start;
            }
            .main-content {
                width: 100vw;
                max-width: 100%;
                flex-wrap: nowrap;
                flex: 1;
                flex-direction: column-reverse;
            }
            .player-box {
                width: 93%;
                max-width: 93%;
                min-width: 93%;
                padding: 5px;
            }
            .left-col {
                padding: 5px;
                width: 94%;
                max-width: 94%;
                min-width: 94%;
                overflow-x: hidden;
            }
            .sub-box {
                flex: 1;
                flex-basis: 0;
                min-height: 200px;
                border: none;
                padding: 5px;
                padding-left: 0px;
                padding-right: 3px;
                overflow-x: hidden;
            }
            .control-box {
                position: relative;
                min-width: 100%;
                max-width: 100%;
            }
        }

        @media only screen
        and (device-width : 414px)
        and (device-height : 896px)
        and (-webkit-device-pixel-ratio : 3)
        and (orientation : portrait) {
            body {
                height: 97vh;
                max-height: 97vh;
                display: flex;
                flex-direction: column;
                flex-wrap: nowrap;
                justify-content: flex-start;
            }
            .main-content {
                width: 100vw;
                max-width: 100%;
                flex-wrap: nowrap;
                flex: 1;
                flex-direction: column-reverse;
            }
            .player-box {
                width: 93%;
                max-width: 93%;
                min-width: 93%;
                padding: 5px;
            }
            .left-col {
                padding: 5px;
            }
            .sub-box {
                flex: 1;
                flex-basis: 0;
                width: 94%;
                max-width: 94%;
                min-width: 94%;
                border: none;
                padding: 5px;
                min-height: 200px;
                padding-left: 0px;
                padding-right: 3px;
            }
            .control-box {
                position: relative;
                width: 93%;
                min-width: 93%;
                max-width: 93%;
            }
        }


  </style>

</head>

<body>
    <header>
        <div>
            Annotated Video Transcript.
            <h1>{{ video_title }}</h1>
            {{ video_creator }}
        </div>
        <div>
            <input style="padding: 3px; border: 0px; border-bottom: 1px solid #000; opacity: .7; margin-right: 1em;"
            size="20"
            placeholder="&nbsp;search transcript"
            id="search-input"
            onchange="searchSubs($(this).val())">
            </input>
            <i class="fa fa-times-circle" onclick="searchSubs('', true)"></i>
        </div>
    </header>

    <div class="main-content">

        <div class="left-col">

            <div class="control-box">

                <div class="control-box-subsection">
                    <div class="button play-button"
                    id="play-button"
                    style="display: none">
                        <i class="fa fa-play"></i>Play
                    </div>
                    <div class="button play-button button-inactive"
                     id="play-button-waiting">
                        Waiting..
                    </div>
                    <div class="button play-button"
                    id="pause-button"
                    style="display: none"
                    onclick="pauseVideo();">
                        <i class="fa fa-pause"></i>Pause
                    </div>
                    <div class="button-spacer"></div>
                    <div class="button"
                    id="autoscroll-button"
                    onclick="toggleSync();">
                        <i class="fa fa-thumbs-up"></i>Auto Scroll
                    </div>
                    <div class="button-spacer"></div>
                    <div class="button"
                    onclick="syncScroll();">
                        <i class="fa fa-refresh"></i>Sync
                    </div>
                </div>

                <div class="control-box-subsection">
                    <div class="button"
                    onclick="scrollSubs();">
                        <i class="fa fa-arrow-up"></i>Top
                    </div>
                    <div class="button-spacer"></div>
                    <div class="button"
                    onclick="scrollSubs('down');">
                        <i class="fa fa-arrow-down"></i>Bottom
                    </div>
                </div>

            </div>

            <div class="sub-box">
                <div class="sub-label">
                    <div id="substart-text" class="sub-text italic">Select text to annotate, Click play in YouTube to begin</div>
                </div>
                {% for sub in transcript %}
                <div class="sub" dir="ltr">
                    <div class="sub-line line{{ loop.index }}" onclick="updatePlayerTime({{ sub.start }});">
                        <div class="sub-text">{{ sub.text }}</div>
                    </div>
                </div>
                {% endfor %}
                <div class="sub-label">
                    <div id="subend-text" class="sub-text italic">End of transcript</div>
                </div>
            </div>

        </div>

        <div class="player-box">
            <div id="video-player">
                <iframe id="video-player-iframe" type="text/html" src="{{ iframe_src }}">
                </iframe>
            </div>
            <br>
            This page is an adaptation of Dan Whaley's <a href="https://github.com/dwhly-proj/droppdf/blob/master/README.md">DropDoc</a> web application.
        </div>

    </div>


<script>
    window.videoId = '{{ video_id }}';
    window.startTimes = {{ start_times }};
</script>

<!-- Below is copied from https://github.com/dwhly-proj/droppdf/blob/master/droppdf/apps/_static/apps/js/youtube.js -->
<script>
$(document).ready(function(){
    var player, duration;

    var current_sub;

    var keep_sync = true;

    var scroll_sub_down = true;

    var subtitle_elements = $('.sub');

    var times = [];

    var has_been_started_by_user = false;

    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);


    function onYouTubeIframeAPIReady() {
        player = new YT.Player('video-player-iframe', {
            playerVars: {
                'autoplay': 1,
                'mute': 1
            },
            events: {
            'onReady': onPlayerReady,
            'onStateChange': onStateChange
            }
        });
        window.player = player;
    };

    function onPlayerReady(event) {
        //binding button (or inline "onclick") don't seem to work initially if
        //instantiated before player is ready.
        //(sometimes)

        //external play button doesn't work initially if not muted.
        //a recent change in both chrome and firefox apparently.
        //we can start the video (muted) externally, but unmuting caused video to stop
        //player.mute();

        $('#play-button').on('click', function() {
            window.playVideo();
        });
    };

    function onStateChange(event) {
        var st = $('#substart-text');

        if (event.data === YT.PlayerState.PLAYING) {
            $('#play-button').hide();
            $('#play-button-waiting').hide();
            $('#pause-button').show();

            has_been_started_by_user = true;
        };

        if (! has_been_started_by_user) {
            return;
        };

        if ($(st).text().indexOf('Click play') != -1) {
            $(st).text('Beginning of transcript');
        };

        if (event.data === YT.PlayerState.PAUSED) {
            $('#play-button').show();
            $('#pause-button').hide();
        }
    };

    function stopVideo() {
        player.stopVideo();
    };

    function _getCurrentTimeIndex(arr, t) {
        if (arr.length == 1) {
            return window.startTimes.indexOf(arr[0]);
        }

        var mid_index = Math.floor(arr.length / 2);

        if (t >= arr[mid_index]) {
            return _getCurrentTimeIndex(arr.slice(mid_index, arr.length), t);
        }
        return _getCurrentTimeIndex(arr.slice(0, mid_index), t);
    };

    window.player = player;
    window.onYouTubeIframeAPIReady = onYouTubeIframeAPIReady;
    window.onPlayerReady = onPlayerReady;
    window.onStateChange = onStateChange;

    window.playVideo = function() {
        player.playVideo();

        $('#play-button').hide();
        $('#pause-button').show();
    };

    window.pauseVideo = function() {
        player.pauseVideo();

        $('#pause-button').hide();
        $('#play-button').show();
    };

    window.scrollSubs = function(d) {
        if (d == 'down') {
            $('.sub-box').scrollTop(1000000);
        } else {
            $('.sub-box').scrollTop(0);
        };
    };

    window.updatePlayerTime = function(s) {
        player.seekTo(s, true);
    };

    window.toggleSync = function() {
        var b = $('#autoscroll-button');

        keep_sync = ! keep_sync;

        if (keep_sync) {
            $(b)
                .removeClass('button-off')
                .find('i')
                .removeClass('fa-ban')
                .addClass('fa-thumbs-up')

        } else {
            $(b)
                .addClass('button-off')
                .find('i')
                .removeClass('fa-thumbs-up')
                .addClass('fa-ban')
        }
    };

    window.syncScroll = function() {
        var t = player.getCurrentTime();

        if (t) {
            index = _getCurrentTimeIndex(window.startTimes, t);

            el = subtitle_elements[index];

            $('.sub-box').scrollTop(0, 0);

            $('.sub-box').scrollTop($(el).position().top);
        }
    };

    window.searchSubs = function(t, clear) {
        var substart_text = $('#substart-text');
        var subend_text = $('#subend-text');
        var hit_count = 0;
        var match_text = 'matches';

        $('.sub').show();

        $('.search-highlight').each(function(i, v) {
            $(v).before($(v).text());
            $(v).remove();
        });

        //no search, clear results
        if (clear || t.length < 1 || t.replace(/\s\s+/g, ' ') == ' ') {
            $(substart_text).text('Beginning of transcript');
            $(subend_text).text('End of transcript');
            $('#search-input').val('');
            return;
        };

        $(subtitle_elements).each(function(i,sub) {
            var new_content = '';
            var match_sjart, match_stop, pre, post
            var current_startpoint = 0;
            var new_subtext = $('<div class="sub-text"></div>');

            var subtext = $(sub).find('.sub-text').first();
            var text = $(subtext).text();
            var clicktrigger = $(subtext).attr('onclick')

            var r = new RegExp(t, 'ig')

            if (text.search(r) === -1) {

                $(sub).hide();
            }
            else {
                while ((match = r.exec(text)) !== null) {
                    hit_count += 1;
                    match_start = match.index;
                    match_stop = r.lastIndex;

                    pre = text.substring(current_startpoint, match_start)
                    post = text.substring(match_stop)

                    $(new_subtext).append(pre);
                    $(new_subtext).append('<span class="search-highlight">' + match[0] + '</span>');

                    var current_startpoint = match_stop;
                }
                $(new_subtext).append(post);

                $(sub).find('.sub-text')
                    .off('click')
                    .replaceWith(new_subtext);

                $(new_subtext).attr('onclick', clicktrigger);
            }
        });

        if (hit_count == 1) {
            match_text = 'match';
        };

        $(substart_text).text('Beginning of search for "' + t + '" (' + hit_count + ' ' + match_text + ')');
        $(subend_text).text('End of search for "' + t + '" (' + hit_count + ' ' + match_text + ')');
    };

    //pause video when current sub mousedown (for H highlight to prevent scroll leaving sub).
    $('.sub-text').mousedown(function() {
        if (! keep_sync) {
            //if autoscroll isn't enabled, don't pause vid.
            return true;
        };

        //is sub the current one?
        if ($(this).parent().hasClass('highlight')) {
            pauseVideo();
        }
    });

    setInterval(function() {
        if (! keep_sync) {
            $('.highlight').removeClass('highlight');
            return;
        };

        if (! player || ! player.getPlayerState) {
            return;
        };

        if (player.getPlayerState() != 1) {
            return;
        };

        var t = player.getCurrentTime();

        if (t) {
            index = _getCurrentTimeIndex(window.startTimes, t);

            el = subtitle_elements[index];

            if (el == current_sub) {
                if (! $(el).hasClass('highlight')) {
                    $(el).addClass('highlight');
                }
                return;
            };

            $('.highlight').removeClass('highlight');
            $(el).addClass('highlight');

            if (! keep_sync) {
                return;
            };

            $('.sub-box').scrollTop(0, 0);

            $('.sub-box').scrollTop($(el).position().top);

            current_sub = el;
        };

    }, 1000);


    /* if from a hypothesis share link, advance video time to time of first H highlight */

    //hypothesis share apparently overwrites location href in code?
    if (eval('window.location.href').indexOf('via.hypothes.is') != -1) {

        console.log('from share');

        var h_highlights = $('.sub-box').find('.hypothesis-highlight');
        var first_h_highlight, timestamp_el, timstamp_text, spl;
        var first_h_hl_time = 0;

        if (h_highlights.length > 1) {
            first_h_highlight = h_highlights[0];

            timestamp_el = $(first_h_highlight)
                            .parent()
                            .parent()
                            .find('.sub-time')

            if (timestamp_el) {
                timestamp_text = timestamp_el[0].text();

                if (timestamp_text.length) {
                    spl = timestamp_text.split(':');

                    first_h_hl_time += +spl[0] * 60 * 60
                    first_h_hl_time += +spl[1] * 60
                    first_h_hl_time += +spl[2]

                    updatePlayerTime(first_h_hl_time);

                    syncScroll();
                };
            }

        };
    }

});
</script>

</body>
</html>
